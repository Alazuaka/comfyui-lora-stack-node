import { app } from "../../../scripts/app.js";

app.registerExtension({
  name: "alazuka.AlazukaCheckpoint",
  async nodeCreated(node) {
    if (node.comfyClass !== "AlazukaCheckpoint") return;

    const widget = node.widgets?.find(w => w.name === "ckpt_name");
    if (!widget) {
      console.warn("‚õî –í–∏–¥–∂–µ—Ç 'ckpt_name' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∑–ª–µ", node);
      return;
    }

    const values = await getGroupedCheckpoints();

    widget.options.values = values;
    widget.value = "none";

    const cb = widget.callback;
    widget.callback = (v) => {
      if (!v || v.startsWith("‚îÄ‚îÄ")) return;  // –∏–≥–Ω–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      widget.value = v;
      cb?.(v);
      app.graph.setDirtyCanvas(true);
    };
  }
});


async function getGroupedCheckpoints() {
  try {
    const resp = await fetch("/alazuka/files/checkpoints");
    if (!resp.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: ${resp.status} ${resp.statusText}`);
    const data = await resp.json();

    const grouped = {};
    let totalFound = 0;

    for (const [baseName, files] of Object.entries(data)) {
      const modelPath = files.model;
      if (!modelPath || !modelPath.endsWith(".safetensors")) {
        continue;
      }

      totalFound++;

      let baseModel = "Unknown";
      const jsonPath = files.json;
      if (jsonPath) {
        try {
          const r = await fetch(`/alazuka/file/${jsonPath}`);
          if (r.ok) {
            const j = await r.json();
            if (typeof j.BaseModel === "string" && j.BaseModel.trim()) {
              baseModel = j.BaseModel.trim();
            }
          } else {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON: ${jsonPath}`);
          }
        } catch (err) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON ${jsonPath}:`, err);
        }
      }

      if (!grouped[baseModel]) grouped[baseModel] = [];
      grouped[baseModel].push(modelPath.split("/").pop()); // –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
    }

    const result = ["none"];
    const sortedKeys = Object.keys(grouped).sort((a, b) => {
      if (a === "Unknown") return 1;
      if (b === "Unknown") return -1;
      return a.localeCompare(b);
    });

    for (const key of sortedKeys) {
      result.push(`‚îÄ‚îÄ ${key} ‚îÄ‚îÄ`);
      const models = grouped[key].sort((a, b) => a.localeCompare(b));
      result.push(...models);
    }

    if (result.length === 1) {
      console.warn("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ 'none'");
    }

    return result;
  } catch (e) {
    console.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤:", e);
    return ["none"];
  }
}
