# üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ `/alazuka/‚Ä¶`

# | Endpoint | –ú–µ—Ç–æ–¥ | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ |
# |----------|-------|------------|
# | `/alazuka/file/{type}/{filename}` | `GET` | –ü–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª (json, image, model, etc) |
# | `/alazuka/related/{type}/{basename}` | `GET` | –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (preview, json –∏ –¥—Ä.) |
# | `/alazuka/savefile/{type}/{target}` | `POST` | –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –ø—Ä–µ–≤—å—é –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø |


import os
import shutil
import json

from aiohttp import web
from server import PromptServer
import folder_paths
from folder_paths import get_directory_by_type, get_full_path, get_folder_paths


def find_related_file(base_path, extensions):
    for ext in extensions:
        candidate = f"{base_path}.{ext}"
        if os.path.isfile(candidate):
            return candidate
    return None


@PromptServer.instance.routes.get("/alazuka/file/{type}/{filename}")
async def serve_file(request):
    type = request.match_info["type"]
    filename = request.match_info["filename"]

    file_path = get_full_path(type, filename)
    if not file_path or not os.path.isfile(file_path):
        return web.Response(status=404)

    ext = os.path.splitext(filename)[1].lower()
    if ext == ".json":
        with open(file_path, "r", encoding="utf-8") as f:
            return web.Response(text=f.read(), content_type="application/json")

    return web.FileResponse(file_path)

@PromptServer.instance.routes.get("/alazuka/files/{type}")
async def get_grouped_files(request):
    # –ü—Ä–∏–º–µ—Ä: /alazuka/files/loras?ext=jpg,png,json,safetensors

    type = request.match_info["type"]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'loras'

    query_exts = request.query.get("ext", "")
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä 'ext' –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: "jpg,png,json"

    if not query_exts:
        return web.Response(status=400, text="Missing 'ext' query parameter")
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ext ‚Äî –æ—à–∏–±–∫–∞ 400

    target_exts = [e.strip().lower() for e in query_exts.split(",") if e.strip()]
    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ["jpg", "png", "json"]

    if not target_exts:
        return web.Response(status=400, text="Invalid 'ext' values")
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –æ—à–∏–±–∫–∞ 400

    folders = folder_paths.get_folder_paths(type)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ 'loras'

    grouped = {}  # –°–æ–±–µ—Ä—ë–º —Å—é–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    for folder in folders:
        if not os.path.isdir(folder):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–∞–ø–∫–∞

        for fname in os.listdir(folder):
            base_name, ext = os.path.splitext(fname)
            # fname: 'ahegao_v1.safetensors' => base_name: 'ahegao_v1', ext: '.safetensors'

            full_base_path = os.path.join(folder, base_name)
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /path/to/loras/ahegao_v1

            found = {}
            for t_ext in target_exts:
                alt_path = f"{full_base_path}.{t_ext}"
                # –ü—Ä–æ–±—É–µ–º: /path/to/loras/ahegao_v1.jpg (–∏–ª–∏ .png/.json)

                if os.path.isfile(alt_path):
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ:
                    found[t_ext] = f"{type}/{os.path.basename(alt_path)}"
                    # –ü—Ä–∏–º–µ—Ä: "jpg": "loras/ahegao_v1.jpg"

            if found:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                grouped[fname] = found
                # –ö–ª—é—á ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: "ahegao_v1.safetensors"
                # –ó–Ω–∞—á–µ–Ω–∏–µ: { "jpg": "loras/ahegao_v1.jpg", ... }

    print(web.json_response(grouped))  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    return web.json_response(grouped)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –≤–∏–¥–∞:
    # {
    #   "ahegao_v1.safetensors": {
    #     "jpg": "loras/ahegao_v1.jpg",
    #     "json": "loras/ahegao_v1.json"
    #   },
    #   "cool_style.ckpt": {
    #     "preview.png": "checkpoints/cool_style.preview.png"
    #   }
    # }

@PromptServer.instance.routes.post("/alazuka/savefile/{type}/{target}")
async def save_file(request):
    type = request.match_info["type"]
    target = request.match_info["target"]

    body = await request.json()
    src_dir = get_directory_by_type(body.get("type", "output"))
    subfolder = body.get("subfolder", "")
    filename = body.get("filename", "")

    src_path = os.path.join(src_dir, os.path.normpath(subfolder), filename)
    dst_path = get_full_path(type, target)

    if not dst_path:
        folders = get_folder_paths(type)
        if not folders:
            return web.Response(status=400)
        dst_path = os.path.join(folders[0], target)

    dst_path = os.path.splitext(dst_path)[0] + os.path.splitext(src_path)[1]

    if os.path.commonpath((src_dir, os.path.abspath(src_path))) != src_dir:
        return web.Response(status=400)

    shutil.copyfile(src_path, dst_path)
    return web.json_response({"saved": f"{type}/{os.path.basename(dst_path)}"})


## üîå –ü—Ä–∏–º–µ—Ä –∫–∞–∫ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ JS

### –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π preview + json:
# ```js
# const type = "loras";
# const basename = "my_lora.safetensors";

# const related = await (await fetch(`/alazuka/related/${type}/${basename}`)).json();

# console.log("Preview URL:", `/alazuka/file/${related.preview}`);
# console.log("JSON URL:", `/alazuka/file/${related.json}`);
# ```

# ### –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON:
# ```js
# const jsonText = await (await fetch(`/alazuka/file/loras/my_lora.json`)).json();
# console.log("TrainedWords:", jsonText.TrainedWords);
# ```

# ### –û—Ç–ø—Ä–∞–≤–∏—Ç—å preview:
# ```js
# await fetch(`/alazuka/savefile/loras/my_lora.safetensors`, {
#   method: "POST",
#   headers: { "Content-Type": "application/json" },
#   body: JSON.stringify({
#     type: "output",
#     subfolder: "temp",
#     filename: "preview.png"
#   })
# });
# ```